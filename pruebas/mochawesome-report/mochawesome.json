{
  "stats": {
    "suites": 6,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-05T02:24:51.555Z",
    "end": "2025-04-05T02:26:11.534Z",
    "duration": 79979,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "15e9a67a-5a58-41c6-b06d-89703b0f3d56",
      "title": "",
      "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
      "file": "\\test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4884a2fa-d592-4360-af8c-0e3c34624b57",
          "title": "Pruebas Automatizadas - Sistema de Registro Vehicular",
          "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
          "file": "\\test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas Automatizadas - Sistema de Registro Vehicular\"",
              "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular \"before each\" hook in \"Pruebas Automatizadas - Sistema de Registro Vehicular\"",
              "timedOut": false,
              "duration": 2971,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder()\n  .forBrowser('MicrosoftEdge')\n  .setEdgeService(service)\n  .setEdgeOptions(options)\n  .build();\nawait driver.get(baseUrl);",
              "err": {},
              "uuid": "e700d03f-8871-424a-ae36-cc7546cec5e5",
              "parentUUID": "4884a2fa-d592-4360-af8c-0e3c34624b57",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas Automatizadas - Sistema de Registro Vehicular\"",
              "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular \"after each\" hook in \"Pruebas Automatizadas - Sistema de Registro Vehicular\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "5f114fa5-c700-4604-8207-90e8a34f7a58",
              "parentUUID": "4884a2fa-d592-4360-af8c-0e3c34624b57",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f0d2efc8-fdab-4496-b319-6dec2fc05720",
              "title": "Registro de Usuario",
              "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
              "file": "\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Prueba positiva: Registro correcto",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Usuario Prueba positiva: Registro correcto",
                  "timedOut": false,
                  "duration": 1767,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const testUser = `test_${Date.now()}`;\nawait registrarUsuario(driver, testUser, PASS);\nawait driver.wait(until.elementLocated(By.css('#toast-container > div.toast-success')), 20000);\nawait takeScreenshot(driver, 'registro_usuario');",
                  "err": {},
                  "uuid": "51fc010c-6755-41f8-b9f7-1c2e691b4ca6",
                  "parentUUID": "f0d2efc8-fdab-4496-b319-6dec2fc05720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa: Usuario ya existe",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Usuario Prueba negativa: Usuario ya existe",
                  "timedOut": false,
                  "duration": 5424,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const testUser = \"user_existente\";\nawait registrarUsuario(driver, testUser, PASS);\nawait driver.wait(until.elementLocated(By.css('#toast-container > div.toast-success')), 20000);\nawait driver.sleep(2000);\nawait registrarUsuario(driver, testUser, PASS);\nawait driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 20000);\nconst errorElem = await driver.findElement(By.css('#toast-container > div.toast-error'));\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace('×', '').trim();\nassert.strictEqual(errorMessage, 'El usuario ya existe');\nawait takeScreenshot(driver, 'registro_usuario_error');",
                  "err": {},
                  "uuid": "975be801-cc6f-480c-b130-8e3d822091e8",
                  "parentUUID": "f0d2efc8-fdab-4496-b319-6dec2fc05720",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51fc010c-6755-41f8-b9f7-1c2e691b4ca6",
                "975be801-cc6f-480c-b130-8e3d822091e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7191,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "178e2677-e26a-4b17-9079-e86f1922bd2b",
              "title": "Inicio de Sesión",
              "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
              "file": "\\test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Inicio de Sesión\"",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Inicio de Sesión \"before each\" hook in \"Inicio de Sesión\"",
                  "timedOut": false,
                  "duration": 1717,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await registrarUsuario(driver, USER, PASS);\nawait driver.get(baseUrl);",
                  "err": {},
                  "uuid": "e79231ba-d461-461e-9af3-240d5706cba4",
                  "parentUUID": "178e2677-e26a-4b17-9079-e86f1922bd2b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Prueba positiva: Inicio de sesión correcto",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Inicio de Sesión Prueba positiva: Inicio de sesión correcto",
                  "timedOut": false,
                  "duration": 285,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await iniciarSesion(driver, USER, PASS);\nconst form = await driver.findElement(By.id('vehicleForm'));\nassert.ok(form);\nawait takeScreenshot(driver, 'inicio_sesion');",
                  "err": {},
                  "uuid": "eafc54e7-6310-4b82-bcc8-fdf8dbabfef0",
                  "parentUUID": "178e2677-e26a-4b17-9079-e86f1922bd2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa: Credenciales incorrectas",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Inicio de Sesión Prueba negativa: Credenciales incorrectas",
                  "timedOut": false,
                  "duration": 324,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await iniciarSesion(driver, 'wronguser', 'wrongpass');\nawait driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 20000);\nconst errorElem = await driver.findElement(By.css('#toast-container > div.toast-error'));\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace('×', '').trim();\nassert.strictEqual(errorMessage, 'Credenciales incorrectas');\nawait takeScreenshot(driver, 'inicio_sesion_error');",
                  "err": {},
                  "uuid": "a4c16429-cd89-48f0-baa0-8cca33051da6",
                  "parentUUID": "178e2677-e26a-4b17-9079-e86f1922bd2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa extra: Campos vacíos en login",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Inicio de Sesión Prueba negativa extra: Campos vacíos en login",
                  "timedOut": false,
                  "duration": 1658,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await waitForClickable(driver, By.id('btnLogin'));\nawait driver.findElement(By.id('btnLogin')).click();\nawait driver.sleep(1500);\nawait driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 20000);\nconst errorElem = await driver.findElement(By.css('#toast-container > div.toast-error'));\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace('×', '').trim();\nassert.strictEqual(errorMessage, 'Credenciales incorrectas');\nawait takeScreenshot(driver, 'login_campos_vacios');",
                  "err": {},
                  "uuid": "f2f2702c-693b-4f3d-a63c-5ab61fab8694",
                  "parentUUID": "178e2677-e26a-4b17-9079-e86f1922bd2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eafc54e7-6310-4b82-bcc8-fdf8dbabfef0",
                "a4c16429-cd89-48f0-baa0-8cca33051da6",
                "f2f2702c-693b-4f3d-a63c-5ab61fab8694"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2267,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "eccefa91-05d8-42c5-9ab8-96c693988b53",
              "title": "Registro de Datos del Vehículo",
              "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
              "file": "\\test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Registro de Datos del Vehículo\"",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Datos del Vehículo \"before each\" hook in \"Registro de Datos del Vehículo\"",
                  "timedOut": false,
                  "duration": 1917,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await registrarUsuario(driver, USER, PASS);\nawait iniciarSesion(driver, USER, PASS);\nawait driver.wait(until.elementLocated(By.id('marca')), 10000);",
                  "err": {},
                  "uuid": "9a96b958-967b-4e15-9c90-cd3ffbbb4453",
                  "parentUUID": "eccefa91-05d8-42c5-9ab8-96c693988b53",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Prueba positiva: Datos del vehículo ingresados correctamente",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Datos del Vehículo Prueba positiva: Datos del vehículo ingresados correctamente",
                  "timedOut": false,
                  "duration": 1821,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const datosVehiculo = {\n  marca: 'Toyota',\n  modelo: 'Corolla',\n  anio: '2020',\n  color: 'Rojo',\n  placa: 'ABC123',\n  tipo: 'sedan'\n};\nawait completarFormularioVehiculo(driver, datosVehiculo);\nconst featuresForm = await driver.wait(until.elementLocated(By.id('featuresForm')), 5000);\nassert.ok(await featuresForm.isDisplayed());\nawait takeScreenshot(driver, 'registro_vehiculo');",
                  "err": {},
                  "uuid": "5f031f72-8147-4525-ac0f-85ba8926b854",
                  "parentUUID": "eccefa91-05d8-42c5-9ab8-96c693988b53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa: Falta completar campos obligatorios",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Datos del Vehículo Prueba negativa: Falta completar campos obligatorios",
                  "timedOut": false,
                  "duration": 150,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id('btnSiguiente')).click();\nconst errorElem = await driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 5000);\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace(/×/g, '').trim();\nassert.strictEqual(errorMessage, 'Complete todos los campos requeridos');\nawait takeScreenshot(driver, 'registro_vehiculo_error');",
                  "err": {},
                  "uuid": "4d29b04b-b607-4bdd-b655-4ecb1dcf5fb8",
                  "parentUUID": "eccefa91-05d8-42c5-9ab8-96c693988b53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa extra: Año inválido (no numérico)",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Registro de Datos del Vehículo Prueba negativa extra: Año inválido (no numérico)",
                  "timedOut": false,
                  "duration": 191,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const anioField = await waitForClickable(driver, By.id('anio'));\nawait setCampo(driver, anioField, 'dos mil veinte');\nawait driver.findElement(By.id('btnSiguiente')).click();\nconst errorElem = await driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 5000);\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace(/×/g, '').trim();\nassert.strictEqual(errorMessage, 'Complete todos los campos requeridos');\nawait takeScreenshot(driver, 'registro_vehiculo_anio_invalido');",
                  "err": {},
                  "uuid": "9bfbbca9-b6dc-424c-bdec-7014568cd484",
                  "parentUUID": "eccefa91-05d8-42c5-9ab8-96c693988b53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f031f72-8147-4525-ac0f-85ba8926b854",
                "4d29b04b-b607-4bdd-b655-4ecb1dcf5fb8",
                "9bfbbca9-b6dc-424c-bdec-7014568cd484"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2162,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "651668ab-e8df-492f-aa7b-dd4fdd9a0911",
              "title": "Selección de Características del Vehículo",
              "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
              "file": "\\test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Selección de Características del Vehículo\"",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Selección de Características del Vehículo \"before each\" hook in \"Selección de Características del Vehículo\"",
                  "timedOut": false,
                  "duration": 6670,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await registrarUsuario(driver, USER, PASS);\nawait iniciarSesion(driver, USER, PASS);\nconst datosVehiculo = {\n  marca: 'Toyota',\n  modelo: 'Corolla',\n  anio: '2020',\n  color: 'Rojo',\n  placa: 'ABC123',\n  tipo: 'sedan'\n};\nawait completarFormularioVehiculo(driver, datosVehiculo);\nawait driver.wait(until.elementLocated(By.id('featuresForm')), 10000);\nawait driver.sleep(3000);\nawait driver.wait(until.elementIsVisible(await driver.findElement(By.id('btnRegistrar'))), 5000);",
                  "err": {},
                  "uuid": "15c0641a-1d1f-432b-b12a-8aafbd208217",
                  "parentUUID": "651668ab-e8df-492f-aa7b-dd4fdd9a0911",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Prueba positiva: Selección correcta de características",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Selección de Características del Vehículo Prueba positiva: Selección correcta de características",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Esperar que se cargue al menos un checkbox dentro de '#caracteristicas'\nawait driver.wait(until.elementsLocated(By.css('#caracteristicas input[type=\"checkbox\"]')), 10000);\nconst checkboxes = await driver.findElements(By.css('#caracteristicas input[type=\"checkbox\"]'));\nif (checkboxes.length === 0) {\n  throw new Error('No se encontraron checkboxes de características');\n}\nawait checkboxes[0].click();\nawait driver.findElement(By.id('btnRegistrar')).click();\nawait driver.wait(until.elementLocated(By.id('resumenForm')), 5000);\nawait takeScreenshot(driver, 'caracteristicas');",
                  "err": {},
                  "uuid": "c404bfd7-5825-445c-9014-d7d45893f7d6",
                  "parentUUID": "651668ab-e8df-492f-aa7b-dd4fdd9a0911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa: No se selecciona ninguna característica",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Selección de Características del Vehículo Prueba negativa: No se selecciona ninguna característica",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id('btnRegistrar')).click();\nconst errorElem = await driver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 5000);\nlet errorMessage = await errorElem.getText();\nerrorMessage = errorMessage.replace(/×/g, '').trim();\nassert.strictEqual(errorMessage, 'Seleccione al menos una característica');\nawait takeScreenshot(driver, 'caracteristicas_error');",
                  "err": {},
                  "uuid": "2d0a0d36-5cbd-4ad9-9190-cf60f13a30d4",
                  "parentUUID": "651668ab-e8df-492f-aa7b-dd4fdd9a0911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c404bfd7-5825-445c-9014-d7d45893f7d6",
                "2d0a0d36-5cbd-4ad9-9190-cf60f13a30d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 268,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "daae4a75-07e5-4f25-a1d0-36c482b366c9",
              "title": "Resumen y Descarga de PDF",
              "fullFile": "C:\\Users\\smith\\Desktop\\seleccion\\pruebas\\test.js",
              "file": "\\test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Resumen y Descarga de PDF\"",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Resumen y Descarga de PDF \"before all\" hook in \"Resumen y Descarga de PDF\"",
                  "timedOut": false,
                  "duration": 9701,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mainDriver = await new Builder()\n  .forBrowser('MicrosoftEdge')\n  .setEdgeService(service)\n  .setEdgeOptions(options)\n  .build();\n\nawait mainDriver.get(baseUrl);\nawait registrarUsuario(mainDriver, USER, PASS);\nawait iniciarSesion(mainDriver, USER, PASS);\nawait completarFormularioVehiculo(mainDriver, {\n  marca: 'Toyota',\n  modelo: 'Corolla',\n  anio: '2020',\n  color: 'Rojo',\n  placa: 'ABC123',\n  tipo: 'sedan'\n});\nawait seleccionarCaracteristicas(mainDriver);",
                  "err": {},
                  "uuid": "de08135d-9e64-4285-8ed1-ff0172891c7b",
                  "parentUUID": "daae4a75-07e5-4f25-a1d0-36c482b366c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Resumen y Descarga de PDF\"",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Resumen y Descarga de PDF \"after all\" hook in \"Resumen y Descarga de PDF\"",
                  "timedOut": false,
                  "duration": 50,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mainDriver.quit();",
                  "err": {},
                  "uuid": "f2c673dc-2575-4110-8d6a-4a4adc894a9a",
                  "parentUUID": "daae4a75-07e5-4f25-a1d0-36c482b366c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Prueba positiva: Visualización y descarga de PDF",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Resumen y Descarga de PDF Prueba positiva: Visualización y descarga de PDF",
                  "timedOut": false,
                  "duration": 5115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const btnDescargar = await mainDriver.wait(until.elementLocated(By.id('btnDescargarPDF')), 10000);\nawait mainDriver.executeScript(\"arguments[0].click();\", btnDescargar);\nawait mainDriver.sleep(5000);\nconst toast = await mainDriver.wait(until.elementLocated(By.css('#toast-container > div.toast-success')), 10000);\nconst texto = (await toast.getText()).replace(/×/g, '').trim();\nassert.match(texto, /PDF generado/i);\nawait takeScreenshot(mainDriver, 'resumen_pdf');",
                  "err": {},
                  "uuid": "19dcd215-79aa-4ada-9de9-cabe355596af",
                  "parentUUID": "daae4a75-07e5-4f25-a1d0-36c482b366c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prueba negativa: Descargar PDF sin completar el registro",
                  "fullTitle": "Pruebas Automatizadas - Sistema de Registro Vehicular Resumen y Descarga de PDF Prueba negativa: Descargar PDF sin completar el registro",
                  "timedOut": false,
                  "duration": 5838,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tempDriver = await new Builder()\n  .forBrowser('MicrosoftEdge')\n  .setEdgeService(service)\n  .setEdgeOptions(options)\n  .build();\ntry {\n  await tempDriver.get(baseUrl);\n  await registrarUsuario(tempDriver, 'tempUser', PASS);\n  await iniciarSesion(tempDriver, 'tempUser', PASS);\n  const btnDescargar = await tempDriver.wait(until.elementLocated(By.id('btnDescargarPDF')), 10000);\n  await tempDriver.executeScript(\"arguments[0].click();\", btnDescargar);\n  const errorElem = await tempDriver.wait(until.elementLocated(By.css('#toast-container > div.toast-error')), 10000);\n  const errorMessage = (await errorElem.getText()).replace(/×/g, '').trim();\n  assert.strictEqual(errorMessage, 'Debe completar el registro del vehículo antes de descargar el PDF.');\n  await takeScreenshot(tempDriver, 'resumen_pdf_error');\n} finally {\n  await tempDriver.quit();\n}",
                  "err": {},
                  "uuid": "ae02a490-a80a-44f2-806b-f53252e0f59e",
                  "parentUUID": "daae4a75-07e5-4f25-a1d0-36c482b366c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19dcd215-79aa-4ada-9de9-cabe355596af",
                "ae02a490-a80a-44f2-806b-f53252e0f59e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10953,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 12000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}